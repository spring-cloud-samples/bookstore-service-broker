/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'org.springframework.boot' version '2.2.13.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.17.2'
}

group = 'org.springframework.cloud'
archivesBaseName = 'bookstore-service-broker'
version = '0.0.1.BUILD-SNAPSHOT'

sourceCompatibility = 1.8

[compileJava, compileTestJava]*.options*.compilerArgs = [
		"-Xlint:serial",
		"-Xlint:varargs",
		"-Xlint:cast",
		"-Xlint:classfile",
		"-Xlint:dep-ann",
		"-Xlint:divzero",
		"-Xlint:empty",
		"-Xlint:finally",
		"-Xlint:overrides",
		"-Xlint:path",
		"-Xlint:-processing",
		"-Xlint:static",
		"-Xlint:try",
		"-Xlint:fallthrough",
		"-Xlint:rawtypes",
		"-Xlint:deprecation",
		"-Xlint:unchecked",
		"-Xlint:options",
		"-Werror"
]

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/release" }
}

dependencies {
	implementation('org.springframework.cloud:spring-cloud-starter-open-service-broker:3.1.2.RELEASE')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	implementation('org.springframework.boot:spring-boot-starter-hateoas') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
	}
	implementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('io.projectreactor:reactor-test')
}

test {
	useJUnitPlatform()
}

if (!project.hasProperty("dockerGroup")) {
	ext.dockerGroup = "sample"
}

docker {
	name "${dockerGroup}/bookstore-service-broker:${version}"
	dockerfile file('../deploy/docker/Dockerfile')
	files jar.archivePath
	buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

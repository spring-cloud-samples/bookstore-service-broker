/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id 'org.springframework.boot' version '3.2.12'
	id 'java'
	id 'com.palantir.docker' version '0.35.0'
	id 'io.spring.javaformat' version '0.0.43'
}

apply plugin: 'checkstyle'
apply plugin: 'io.spring.javaformat'

group = 'org.springframework.cloud'
archivesBaseName = 'bookstore-service-broker'
version = '0.0.1.BUILD-SNAPSHOT'

[compileJava, compileTestJava]*.options*.compilerArgs = [
		"-Xlint:serial",
		"-Xlint:varargs",
		"-Xlint:cast",
		"-Xlint:classfile",
		"-Xlint:dep-ann",
		"-Xlint:divzero",
		"-Xlint:empty",
		"-Xlint:finally",
		"-Xlint:overrides",
		"-Xlint:path",
		"-Xlint:-processing",
		"-Xlint:static",
		"-Xlint:try",
		"-Xlint:fallthrough",
		"-Xlint:rawtypes",
		"-Xlint:deprecation",
		"-Xlint:unchecked",
		"-Xlint:options",
		"-Werror",
		"-parameters"
]

repositories {
	mavenCentral()
}

dependencies {
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.43")
	implementation platform('org.springframework.boot:spring-boot-dependencies:3.2.11')
	implementation('org.springframework.cloud:spring-cloud-starter-open-service-broker:4.2.0')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	implementation('org.springframework.hateoas:spring-hateoas')
	implementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:4.16.1')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('io.projectreactor:reactor-test')
}

checkstyle {
	showViolations = true
}
checkstyleTest {
	configFile = configDirectory.get().file("checkstyle-test.xml").asFile
}

test {
	useJUnitPlatform()
}

wrapper {
	gradleVersion = '8.11'
}

if (!project.hasProperty("dockerGroup")) {
	ext.dockerGroup = "sample"
}

docker {
	name "${dockerGroup}/bookstore-service-broker:${version}"
	dockerfile file('../deploy/docker/Dockerfile')
	files jar.archiveFile
	buildArgs(['JAR_FILE': "${jar.archiveFileName}"])
}
